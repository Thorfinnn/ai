//DFS MINIMAX ALGORITHM

void DFS(unordered_map<int ,list<int>> &adjList,unordered_map<int,bool> &visited,int node,vector<int> &ans){
    ans.push_back(node);
    visited[node] = true;
    
    for(auto i:adjList[node]){
        if(!visited[i]){
            DFS(adjList,visited,i,ans);
        }
    }
}



//BFS ALGORITHM

#include<vector>
#include <iostream>
#include<queue>
#include<list>
#include<unordered_map>
using namespace std;


void BFS(unordered_map<int ,list<int>> &adjList,unordered_map<int,bool> &visited,int node,vector<int> &ans){
    
    queue<int> q;
    q.push(node);
    visited[node]=true;
    
    while(!q.empty()){
        int frontNode = q.front();
        q.pop();
        
        ans.push_back(frontNode);
        
        for(auto i:adjList[frontNode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=true;
            }
        }
    }
}




void addEdge(unordered_map<int ,list<int>> &adjList,int u,int v){
    adjList[u].push_back(v);
    adjList[v].push_back(u);
}


int main(){
    unordered_map<int ,list<int>> adjList;
    unordered_map<int,bool> visited;
    vector<int> ans;
    
    int n,e;
    
    cout<<"Enter The Number Of Nodes - ";
    cin>>n;
    
    cout<<"\nEnter The Number Of Edges - ";
    cin>>e;
    
    cout<<"\nEnter The Edges - \n";
    
    for(int i=0;i<e;i++){
        int u,v;
        cin>>u>>v;
        addEdge(adjList,u,v);
    }
    cout<<"\nThe Adjacency List Is - "<<endl;
    for(auto x:adjList){
        cout<<x.first<<"->";
        for(auto y:x.second){
            cout<<y<<",";
        }
        cout<<endl;
    }
    
    int node = 1;
    BFS(adjList,visited,node,ans);
    
    cout<<"\nThe Nodes Are - "<<endl;
    for(int i=0;i<ans.size();i++){
        cout<<ans[i]<<"\t";
    }
    
    return 0;
}







#include <iostream>
#include<vector>
using namespace std;

int minimax(vector<int> &finalStates,bool maximizer,int low,int high){
    if(low==high){
        return finalStates[low];
    }
    
    int mid = (low+high)/2;
    
    if(maximizer){
        return max(minimax(finalStates,false,low,mid),minimax(finalStates,false,mid+1,high));
    }
    return min(minimax(finalStates,true,low,mid),minimax(finalStates,true,mid+1,high));
}



//MINI-MAX ALGORITHM
int main(){
    
    int n;
    int x;
    int ans;
    vector<int> finalStates;
    
    cout<<"Enter The Number Of Nodes - ";
    cin>>n;
    
    cout<<"Enter The Nodes - "<<endl;
    for(int i=0;i<n;i++){
        cin>>x;
        finalStates.push_back(x);
    }
    
    cout<<"\nThe Nodes Are - "<<endl;
    for(int i=0;i<n;i++){
        cout<<finalStates[i]<<"\t";
    }
    
    ans = minimax(finalStates,true,0,n-1);
    
    cout<<"\nThe Best Maximizer is - "<<ans<<endl;

    return 0;
}

